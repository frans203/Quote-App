{"version":3,"sources":["components/comments/CommentItem.module.css","components/comments/CommentsList.module.css","components/comments/Comments.module.css","components/comments/NewCommentForm.module.css","components/quotes/HighlightedQuote.module.css","components/comments/CommentItem.js","components/comments/CommentsList.js","components/comments/NewCommentForm.js","components/comments/Comments.js","components/quotes/HighlightedQuote.js","pages/QuoteDetail.js"],"names":["module","exports","CommentItem","props","className","classes","item","text","CommentsList","comments","map","comment","id","NewCommentForm","useHttp","addComment","sendRequest","status","error","commentTextRef","useRef","onAddedComment","useEffect","submitFormHandler","event","preventDefault","requestData","current","value","quoteId","form","onSubmit","control","htmlFor","rows","ref","actions","Comments","useState","isAddingComment","setIsAddingComment","getAllComments","loadedComments","data","params","useParams","addedCommentHandler","useCallback","LoadingSpinner","length","onClick","HighlightedQuote","quote","author","QuoteDetail","match","useRouteMatch","getSingleQuote","console","log","path","exact","to","url"],"mappings":"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","file":"static/js/4.6ffae8a1.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"item\":\"CommentItem_item__1KF2L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"CommentsList_comments__3n271\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"comments\":\"Comments_comments__2ZHrd\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"NewCommentForm_form__37_9t\",\"loading\":\"NewCommentForm_loading__3UAtG\",\"control\":\"NewCommentForm_control__3w1rI\",\"actions\":\"NewCommentForm_actions__2bKNA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"quote\":\"HighlightedQuote_quote__1ByGm\"};","import classes from './CommentItem.module.css';\n\nconst CommentItem = (props) => {\n  return (\n    <li className={classes.item}>\n      <p>{props.text}</p>\n    </li>\n  );\n};\n\nexport default CommentItem;\n","import CommentItem from './CommentItem';\nimport classes from './CommentsList.module.css';\n\nconst CommentsList = (props) => {\n  return (\n    <ul className={classes.comments}>\n      {props.comments.map((comment) => (\n        <CommentItem key={comment.id} text={comment.text} />\n      ))}\n    </ul>\n  );\n};\n\nexport default CommentsList;\n","import { useEffect, useRef } from \"react\";\n\nimport classes from \"./NewCommentForm.module.css\";\nimport useHttp from \"../../hooks/use-http\";\nimport { addComment } from \"../../lib/api\";\nconst NewCommentForm = (props) => {\n  const { sendRequest, status, error } = useHttp(addComment);\n  const commentTextRef = useRef();\n  const { onAddedComment } = props;\n  useEffect(() => {\n    if (status === \"completed\" && !error) {\n      onAddedComment();\n    }\n  }, [error, status]);\n\n  const submitFormHandler = (event) => {\n    event.preventDefault();\n\n    // optional: Could validate here\n\n    // send comment to server\n\n    sendRequest({\n      requestData: { text: commentTextRef.current.value },\n      quoteId: props.quoteId,\n    });\n    commentTextRef.current.value = \"\";\n  };\n\n  return (\n    <form className={classes.form} onSubmit={submitFormHandler}>\n      <div className={classes.control} onSubmit={submitFormHandler}>\n        <label htmlFor=\"comment\">Your Comment</label>\n        <textarea id=\"comment\" rows=\"5\" ref={commentTextRef}></textarea>\n      </div>\n      <div className={classes.actions}>\n        <button className=\"btn\">Add Comment</button>\n      </div>\n    </form>\n  );\n};\n\nexport default NewCommentForm;\n","import { useState, useEffect, useCallback } from \"react\";\nimport { useParams } from \"react-router\";\nimport CommentsList from \"../comments/CommentsList\";\nimport useHttp from \"../../hooks/use-http\";\nimport { getAllComments } from \"../../lib/api\";\nimport LoadingSpinner from \"../UI/LoadingSpinner\";\nimport classes from \"./Comments.module.css\";\nimport NewCommentForm from \"./NewCommentForm\";\n\nconst Comments = () => {\n  const [isAddingComment, setIsAddingComment] = useState(false);\n  const {\n    sendRequest,\n    data: loadedComments,\n    status,\n    error,\n  } = useHttp(getAllComments);\n  const params = useParams();\n\n  useEffect(() => {\n    sendRequest(params.quoteId);\n  }, [params.quoteId, sendRequest]);\n  const startAddCommentHandler = () => {\n    setIsAddingComment(true);\n  };\n\n  const addedCommentHandler = useCallback(() => {\n    sendRequest(params.quoteId);\n  }, [params.quoteId, sendRequest]);\n  let comments;\n  if (!error && status === \"completed\") {\n    comments = <CommentsList comments={loadedComments} />;\n  }\n  if (status === \"pending\") {\n    comments = (\n      <div className=\"centered\">\n        <LoadingSpinner />\n      </div>\n    );\n  }\n\n  if (\n    status === \"completed\" &&\n    (!loadedComments || loadedComments.length === 0)\n  ) {\n    comments = <p>No comments yet!</p>;\n  }\n  return (\n    <section className={classes.comments}>\n      <h2>User Comments</h2>\n      {!isAddingComment && (\n        <button className=\"btn\" onClick={startAddCommentHandler}>\n          Add a Comment\n        </button>\n      )}\n      {isAddingComment && (\n        <NewCommentForm\n          quoteId={params.quoteId}\n          onAddedComment={addedCommentHandler}\n        />\n      )}\n      {comments}\n    </section>\n  );\n};\n\nexport default Comments;\n","import classes from './HighlightedQuote.module.css';\n\nconst HighlightedQuote = (props) => {\n  return (\n    <figure className={classes.quote}>\n      <p>{props.text}</p>\n      <figcaption>{props.author}</figcaption>\n    </figure>\n  );\n};\n\nexport default HighlightedQuote;\n","import { Link, Route, useParams, useRouteMatch } from \"react-router-dom\";\r\nimport { Fragment, useEffect } from \"react\";\r\nimport { getSingleQuote } from \"../lib/api\";\r\nimport useHttp from \"../hooks/use-http\";\r\nimport Comments from \"../components/comments/Comments\";\r\nimport HighlightedQuote from \"../components/quotes/HighlightedQuote\";\r\nimport LoadingSpinner from \"../components/UI/LoadingSpinner\";\r\nconst DUMMY_QUOTES = [\r\n  { id: \"q1\", author: \"Max\", text: \"Learning React is Fun!\" },\r\n  { id: \"q2\", author: \"Josh\", text: \"I love to cook\" },\r\n];\r\n\r\nconst QuoteDetail = () => {\r\n  const match = useRouteMatch();\r\n  const params = useParams();\r\n  const { quoteId } = params;\r\n\r\n  const {\r\n    sendRequest,\r\n    data: quote,\r\n    status,\r\n    error,\r\n  } = useHttp(getSingleQuote, true);\r\n  useEffect(() => {\r\n    sendRequest(quoteId);\r\n    console.log(quote);\r\n  }, [sendRequest]);\r\n  if (status === \"pending\") {\r\n    return (\r\n      <div className=\"centered\">\r\n        <LoadingSpinner />\r\n      </div>\r\n    );\r\n  }\r\n  if (error) {\r\n    return <p>{error}</p>;\r\n  }\r\n  // const quote = DUMMY_QUOTES.find((item) => item.id === params.quoteId);\r\n  if (!quote.text) {\r\n    return (\r\n      <div className=\"centered\">\r\n        <h1>No quote was founded!</h1>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (status === \"completed\") {\r\n    return (\r\n      <Fragment>\r\n        <HighlightedQuote text={quote.text} author={quote.author} />\r\n        <Route path={`${match.path}`} exact>\r\n          <div className=\"centered\">\r\n            <Link className=\"btn--flat\" to={`${match.url}/comments`}>\r\n              Show Comments\r\n            </Link>\r\n          </div>\r\n        </Route>\r\n        <Route path={`${match.path}/comments`}>\r\n          <Comments />\r\n        </Route>\r\n      </Fragment>\r\n    );\r\n  }\r\n};\r\n\r\nexport default QuoteDetail;\r\n"],"sourceRoot":""}